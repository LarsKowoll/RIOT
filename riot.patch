From f1fb4b85f41442234a6e01789c04354822330a41 Mon Sep 17 00:00:00 2001
From: Lars <lars.kowoll@haw-hamburg.de>
Date: Wed, 2 Dec 2020 14:10:07 +0100
Subject: [PATCH 01/11] add spam function

---
 tests/ieee802154_hal/main.c | 160 ++++++++++++++++++++++++++++++++++--
 1 file changed, 151 insertions(+), 9 deletions(-)

diff --git a/tests/ieee802154_hal/main.c b/tests/ieee802154_hal/main.c
index 555476b1b3..bc0df98417 100644
--- a/tests/ieee802154_hal/main.c
+++ b/tests/ieee802154_hal/main.c
@@ -40,11 +40,23 @@
 
 #define RADIO_DEFAULT_ID (0U)
 
+
+uint16_t confirm_counter = 0;
+uint16_t request_counter = 0;
+
 static inline void _set_trx_state(int state, bool verbose);
+static int send(uint8_t *dst, size_t dst_len, size_t len);
+
+
+static uint16_t received_acks;
+static uint16_t send_packets;
+static uint16_t received_packets;
 
 static uint8_t buffer[127];
 static xtimer_t timer_ack;
 static mutex_t lock;
+static bool send_reply;
+static bool enable_prints;
 
 static const char *str_states[3]= {"TRX_OFF", "RX", "TX"};
 static ieee802154_rx_mode_t current_rx_mode;
@@ -55,17 +67,35 @@ static uint8_t seq;
 static void _print_packet(size_t size, uint8_t lqi, int16_t rssi)
 {
     if (buffer[0] & IEEE802154_FCF_TYPE_ACK && ((seq-1) == buffer[2])) {
-        printf("Received valid ACK with sqn %i\n", buffer[2]);
+        if (enable_prints) {
+            printf("Received valid ACK with sqn %i\n", buffer[2]);
+        }
+        received_acks++;
     }
     else {
-        puts("Packet received:");
-        for (unsigned i=0;i<size;i++) {
-            printf("%02x ", buffer[i]);
+        if (enable_prints) {
+            puts("Packet received:");
+            for (unsigned i=0;i<size;i++) {
+                printf("%02x ", buffer[i]);
+            }
+        }
+        received_packets++;
+        if (send_reply) {
+            puts("");
+            uint8_t out[IEEE802154_LONG_ADDRESS_LEN];
+            unsigned j = 0;
+            for (unsigned i=20;i>12;i--) {
+                out[j] = buffer[i];
+                j++;
+            }
+            send(out, IEEE802154_LONG_ADDRESS_LEN, size - 21);
         }
     }
-    puts("");
-    printf("LQI: %i, RSSI: %i\n", (int) lqi, (int) rssi);
-    puts("");
+    if (enable_prints) {
+        puts("");
+        printf("LQI: %i, RSSI: %i\n", (int) lqi, (int) rssi);
+        puts("");
+    }
 }
 
 static int print_addr(int argc, char **argv)
@@ -160,7 +190,10 @@ static void _tx_finish_handler(event_t *event)
 
     switch (tx_info.status) {
         case TX_STATUS_SUCCESS:
-            puts("Transmission succeeded");
+            if (enable_prints) {
+                puts("Transmission succeeded");
+            }
+            send_packets++;
             break;
         case TX_STATUS_FRAME_PENDING:
             puts("Transmission succeeded and there's pending data");
@@ -260,7 +293,7 @@ static int send(uint8_t *dst, size_t dst_len,
         .iol_next = NULL,
     };
 
-    flags = IEEE802154_FCF_TYPE_DATA | IEEE802154_FCF_ACK_REQ;
+    flags = IEEE802154_FCF_TYPE_DATA ; //IEEE802154_FCF_ACK_REQ
 
     src_pan = byteorder_btols(byteorder_htons(CONFIG_IEEE802154_DEFAULT_PANID));
     dst_pan = byteorder_btols(byteorder_htons(CONFIG_IEEE802154_DEFAULT_PANID));
@@ -636,6 +669,112 @@ static int _caps_cmd(int argc, char **argv)
     return 0;
 }
 
+
+// uint8_t payload[] = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam ornare lacinia mi elementum interdum ligula.";
+
+static int _spam(uint8_t *dst, size_t dst_len, size_t len, size_t num, size_t time)
+{
+    uint8_t flags;
+    uint8_t mhr[IEEE802154_MAX_HDR_LEN];
+    int mhr_len;
+
+    le_uint16_t src_pan, dst_pan;
+    iolist_t iol_data = {
+        .iol_base = payload,
+        .iol_len = len,
+        .iol_next = NULL,
+    };
+
+    flags = IEEE802154_FCF_TYPE_DATA;// | IEEE802154_FCF_ACK_REQ;
+
+    src_pan = byteorder_btols(byteorder_htons(CONFIG_IEEE802154_DEFAULT_PANID));
+    dst_pan = byteorder_btols(byteorder_htons(CONFIG_IEEE802154_DEFAULT_PANID));
+    uint8_t src_len = IEEE802154_LONG_ADDRESS_LEN;
+    void *src = &ext_addr;
+    received_acks = 0;
+    received_packets = 0;
+    send_packets = 0;
+    for(size_t i = 0; i < num; i++) {
+        /* fill MAC header, seq should be set by device */
+        if ((mhr_len = ieee802154_set_frame_hdr(mhr, src, src_len,
+                                            dst, dst_len,
+                                            src_pan, dst_pan,
+                                            flags, seq++)) < 0) {
+            puts("txtsnd: Error preperaring frame");
+            return 1;
+        }
+
+        iolist_t iol_hdr = {
+            .iol_next = &iol_data,
+            .iol_base = mhr,
+            .iol_len = mhr_len,
+        };
+        _send(&iol_hdr);
+        xtimer_msleep(time);
+    }
+    puts("-------Summary of the test-------");
+    printf("Send Packets: %d\n", send_packets);
+    printf("Acknowledged Packets: %d\n", received_acks);
+    printf("Percentage: %d\n", (received_acks * 100)/num);
+    printf("Received Packets: %d\n", received_packets);
+    puts("---------------------------------");
+    return 0;
+}
+
+int txtspam(int argc, char **argv)
+{
+    uint8_t addr[IEEE802154_LONG_ADDRESS_LEN];
+    size_t len;
+    size_t res;
+    size_t num;
+    size_t time;
+
+    if (argc != 5) {
+        puts("Usage: spam <long_addr> <len> <number of packets> <time in ms between packets>");
+        return 1;
+    }
+
+    res = _parse_addr(addr, sizeof(addr), argv[1]);
+    if (res == 0) {
+        puts("Usage: spam <long_addr> <len> <number of packets> <time in ms between packets>");
+        return 1;
+    };
+
+    len = atoi(argv[2]);
+    num = atoi(argv[3]);
+    time = atoi(argv[4]);
+    return _spam(addr, res, len, num, time);
+}
+
+int toggle_reply(int argc, char **argv) {
+    (void)argv[0];
+    (void)argc;
+    if (send_reply) {
+        send_reply = false;
+        puts("Packets are no longer mirrored");
+    } else {
+        send_reply = true;
+        puts("Packets are now mirrored");
+    }
+    printf("Request: %d\n", request_counter);
+    printf("Confirm: %d\n", confirm_counter);
+    return 0;
+}
+
+int toggle_enable_prints(int argc, char **argv) {
+    (void)argv[0];
+    (void)argc;
+    if (enable_prints) {
+        enable_prints = false;
+        puts("Printing is now disabled");
+    } else {
+        enable_prints = true;
+        puts("Printing is now enabled");
+    }
+    return 0;
+}
+
+
 static const shell_command_t shell_commands[] = {
     { "config_phy", "Set channel and TX power", config_phy},
     { "print_addr", "Print IEEE802.15.4 addresses", print_addr},
@@ -646,6 +785,9 @@ static const shell_command_t shell_commands[] = {
     { "rx_mode", "Enable/Disable AACK or set Frame Pending bit or set promiscuos mode", rx_mode_cmd },
     { "tx_mode", "Enable CSMA-CA, CCA or direct transmission", txmode_cmd },
     { "caps", "Get a list of caps supported by the device", _caps_cmd },
+    { "spam", "Sends many packets to the target", txtspam },
+    { "reply", "Every packet that arrives is mirrored", toggle_reply },
+    { "enable_prints", "Enable printing", toggle_enable_prints },
     { NULL, NULL, NULL }
 };
 
-- 
2.17.1


From 976cc8d719556869952011030be3134d5de0f4be Mon Sep 17 00:00:00 2001
From: Lars <lars.kowoll@haw-hamburg.de>
Date: Wed, 2 Dec 2020 14:16:40 +0100
Subject: [PATCH 02/11] add global variables for cnt request and confirm

---
 sys/include/net/ieee802154/radio.h | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/sys/include/net/ieee802154/radio.h b/sys/include/net/ieee802154/radio.h
index 8055ebaaa3..0a1d7325bb 100644
--- a/sys/include/net/ieee802154/radio.h
+++ b/sys/include/net/ieee802154/radio.h
@@ -32,6 +32,9 @@ extern "C" {
 #include "byteorder.h"
 #include "net/eui64.h"
 
+extern uint16_t request_counter;
+extern uint16_t confirm_counter;
+
 /**
  * @brief Forward declaration of the radio ops structure.
  */
-- 
2.17.1


From b81c2759e9e5469158ab4d60181cd73335653107 Mon Sep 17 00:00:00 2001
From: Lars <lars.kowoll@haw-hamburg.de>
Date: Wed, 2 Dec 2020 14:24:25 +0100
Subject: [PATCH 03/11] add assertion read and confirm will be called in the
 right order

---
 cpu/cc2538/radio/cc2538_rf_radio_ops.c | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/cpu/cc2538/radio/cc2538_rf_radio_ops.c b/cpu/cc2538/radio/cc2538_rf_radio_ops.c
index 0ca37c48f9..dfe2c7297b 100644
--- a/cpu/cc2538/radio/cc2538_rf_radio_ops.c
+++ b/cpu/cc2538/radio/cc2538_rf_radio_ops.c
@@ -31,6 +31,7 @@
 #include "net/ieee802154/radio.h"
 
 static const ieee802154_radio_ops_t cc2538_rf_ops;
+static bool read_got_called = false;
 
 ieee802154_dev_t cc2538_rf_dev = {
     .driver = &cc2538_rf_ops,
@@ -207,6 +208,7 @@ static int _read(ieee802154_dev_t *dev, void *buf, size_t size, ieee802154_rx_in
     }
 
 
+    read_got_called = true;
     return res;
 }
 
@@ -276,6 +278,8 @@ static int _confirm_set_trx_state(ieee802154_dev_t *dev)
     if (RFCORE->XREG_FSMSTAT0bits.FSM_FFCTRL_STATE == FSM_STATE_RX_CALIBRATION) {
         return -EAGAIN;
     }
+    confirm_counter++;
+    assert(request_counter == confirm_counter);
     return 0;
 }
 
@@ -303,9 +307,12 @@ static int _request_set_trx_state(ieee802154_dev_t *dev, ieee802154_trx_state_t
             RFCORE_XREG_RFIRQM0 |= RXPKTDONE;
             RFCORE_SFR_RFST = ISFLUSHRX;
             RFCORE_SFR_RFST = ISRXON;
+            read_got_called = false;
             break;
     }
 
+    assert(request_counter == confirm_counter);
+    request_counter++;
     return 0;
 }
 
-- 
2.17.1


From 51ee5a46629eafd78c12dc68223aed5cbd8aff6b Mon Sep 17 00:00:00 2001
From: Lars <lars.kowoll@haw-hamburg.de>
Date: Wed, 2 Dec 2020 14:57:00 +0100
Subject: [PATCH 04/11] add readme

---
 tests/ieee802154_hal/readme.md | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 tests/ieee802154_hal/readme.md

diff --git a/tests/ieee802154_hal/readme.md b/tests/ieee802154_hal/readme.md
new file mode 100644
index 0000000000..00bcb6e373
--- /dev/null
+++ b/tests/ieee802154_hal/readme.md
@@ -0,0 +1 @@
+# test
\ No newline at end of file
-- 
2.17.1


From 84b0ae4be9646c1da9ddf81a96121837755e62e2 Mon Sep 17 00:00:00 2001
From: Lars Kowoll <43567112+LarsKowoll@users.noreply.github.com>
Date: Wed, 2 Dec 2020 15:13:23 +0100
Subject: [PATCH 05/11] Update readme.md

---
 tests/ieee802154_hal/readme.md | 10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

diff --git a/tests/ieee802154_hal/readme.md b/tests/ieee802154_hal/readme.md
index 00bcb6e373..13c4830dd4 100644
--- a/tests/ieee802154_hal/readme.md
+++ b/tests/ieee802154_hal/readme.md
@@ -1 +1,9 @@
-# test
\ No newline at end of file
+# Used Devices
+- nRF52840-DK
+- olertia
+
+# Errors found
+
+## nRF52840-DK 
+
+test
-- 
2.17.1


From 98fe98744dd4ee2814f3e2f3db176d140435372c Mon Sep 17 00:00:00 2001
From: Lars Kowoll <43567112+LarsKowoll@users.noreply.github.com>
Date: Wed, 2 Dec 2020 15:21:51 +0100
Subject: [PATCH 06/11] Update readme.md

---
 tests/ieee802154_hal/readme.md | 11 ++++++++++-
 1 file changed, 10 insertions(+), 1 deletion(-)

diff --git a/tests/ieee802154_hal/readme.md b/tests/ieee802154_hal/readme.md
index 13c4830dd4..84784631b3 100644
--- a/tests/ieee802154_hal/readme.md
+++ b/tests/ieee802154_hal/readme.md
@@ -6,4 +6,13 @@
 
 ## nRF52840-DK 
 
-test
+### Failed assertion when in reply mode
+
+How to reproduce: 
+  - Set nRF52840-DK to reply mode with "reply"
+  - Use spam function from another radio e.g. "spam <long_addr>  10 100 5"
+  
+### Crashes if packets are not sent with a delay
+
+How to reproduce:
+  - Use spam function on radio nRF52840-DK e.g. "spam <long_addr> <len> <number of packets> 5"
-- 
2.17.1


From abd6a764e70b3a8c36f7615daca0f4b636e134e3 Mon Sep 17 00:00:00 2001
From: Lars Kowoll <43567112+LarsKowoll@users.noreply.github.com>
Date: Wed, 2 Dec 2020 15:22:19 +0100
Subject: [PATCH 07/11] Update readme.md

---
 tests/ieee802154_hal/readme.md | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/tests/ieee802154_hal/readme.md b/tests/ieee802154_hal/readme.md
index 84784631b3..8a39ccb773 100644
--- a/tests/ieee802154_hal/readme.md
+++ b/tests/ieee802154_hal/readme.md
@@ -15,4 +15,4 @@ How to reproduce:
 ### Crashes if packets are not sent with a delay
 
 How to reproduce:
-  - Use spam function on radio nRF52840-DK e.g. "spam <long_addr> <len> <number of packets> 5"
+  - Use spam function on radio nRF52840-DK e.g. "spam <long_addr> <len> <number of packets> 0"
-- 
2.17.1


From 798a7628f09401ad39ab8f908d0884fcd80ad9a4 Mon Sep 17 00:00:00 2001
From: Lars Kowoll <43567112+LarsKowoll@users.noreply.github.com>
Date: Wed, 2 Dec 2020 15:35:43 +0100
Subject: [PATCH 08/11] Update readme.md

---
 tests/ieee802154_hal/readme.md | 14 ++++++++++++++
 1 file changed, 14 insertions(+)

diff --git a/tests/ieee802154_hal/readme.md b/tests/ieee802154_hal/readme.md
index 8a39ccb773..1295436572 100644
--- a/tests/ieee802154_hal/readme.md
+++ b/tests/ieee802154_hal/readme.md
@@ -16,3 +16,17 @@ How to reproduce:
 
 How to reproduce:
   - Use spam function on radio nRF52840-DK e.g. "spam <long_addr> <len> <number of packets> 0"
+  
+## olertia
+
+### Gets RFCORE_ASSERT when in reply mode and packets are sent with a small delay
+
+How to reproduce:
+  - Set olertia to reply mode with "reply"
+  - Use spam function from nRF52840-DK e.g. "spam <long_addr>  10 100 1"
+  
+### Gets an ISR stack overflow when using spam wit a small delay and the other radio is in reply mode
+
+How to reproduce:
+  - Set nRF52840-DK to reply mode with "reply"
+  - Use spam function on radio olertia e.g. "spam <long_addr> <len> <number of packets> 0"
-- 
2.17.1


From d7e6afa0e5ad410a006fd9040cc76f16188a7974 Mon Sep 17 00:00:00 2001
From: Lars Kowoll <43567112+LarsKowoll@users.noreply.github.com>
Date: Wed, 2 Dec 2020 15:36:33 +0100
Subject: [PATCH 09/11] Update readme.md

---
 tests/ieee802154_hal/readme.md | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/tests/ieee802154_hal/readme.md b/tests/ieee802154_hal/readme.md
index 1295436572..ed6f7fbc60 100644
--- a/tests/ieee802154_hal/readme.md
+++ b/tests/ieee802154_hal/readme.md
@@ -15,7 +15,7 @@ How to reproduce:
 ### Crashes if packets are not sent with a delay
 
 How to reproduce:
-  - Use spam function on radio nRF52840-DK e.g. "spam <long_addr> <len> <number of packets> 0"
+  - Use spam function on radio nRF52840-DK e.g. "spam <long_addr>, <len>, <number of packets>, 0"
   
 ## olertia
 
@@ -29,4 +29,4 @@ How to reproduce:
 
 How to reproduce:
   - Set nRF52840-DK to reply mode with "reply"
-  - Use spam function on radio olertia e.g. "spam <long_addr> <len> <number of packets> 0"
+  - Use spam function on radio olertia e.g. "spam <long_addr>, <len>, <number of packets>, 1"
-- 
2.17.1


From 9f1485b3896cc41b2aa7ad778a624812189d01ab Mon Sep 17 00:00:00 2001
From: Lars <lars.kowoll@haw-hamburg.de>
Date: Fri, 4 Dec 2020 12:54:32 +0100
Subject: [PATCH 10/11] add test for switching channels

---
 tests/ieee802154_hal/main.c | 83 ++++++++++++++++++++++++++++++++-----
 1 file changed, 72 insertions(+), 11 deletions(-)

diff --git a/tests/ieee802154_hal/main.c b/tests/ieee802154_hal/main.c
index bc0df98417..893ddbabeb 100644
--- a/tests/ieee802154_hal/main.c
+++ b/tests/ieee802154_hal/main.c
@@ -34,6 +34,8 @@
 
 #include "xtimer.h"
 
+#include "cond.h"
+
 #define SYMBOL_TIME (16U) /**< 16 us */
 
 #define ACK_TIMEOUT_TIME (40 * SYMBOL_TIME)
@@ -55,8 +57,11 @@ static uint16_t received_packets;
 static uint8_t buffer[127];
 static xtimer_t timer_ack;
 static mutex_t lock;
+static mutex_t got_message_mutex;
 static bool send_reply;
 static bool enable_prints;
+static cond_t got_message_cond;
+static bool got_message;
 
 static const char *str_states[3]= {"TRX_OFF", "RX", "TX"};
 static ieee802154_rx_mode_t current_rx_mode;
@@ -73,6 +78,12 @@ static void _print_packet(size_t size, uint8_t lqi, int16_t rssi)
         received_acks++;
     }
     else {
+        got_message = true;
+        //check if packet is for me (test)
+        //lock;
+        //post an event;
+        //unlock;
+        cond_signal(&got_message_cond);
         if (enable_prints) {
             puts("Packet received:");
             for (unsigned i=0;i<size;i++) {
@@ -501,16 +512,7 @@ static int rx_mode_cmd(int argc, char **argv)
     return 0;
 }
 
-int config_phy(int argc, char **argv)
-{
-    if (argc < 3) {
-        puts("Usage: config_phy <channel> <tx_pow>");
-        return 1;
-    }
-
-    uint8_t channel = atoi(argv[1]);
-    int8_t tx_pow = atoi(argv[2]);
-
+int _config_phy(uint8_t channel, int8_t tx_pow) {
     if (channel < 11 || channel > 26) {
         puts("Wrong channel configuration (11 <= channel <= 26).");
         return 1;
@@ -522,7 +524,7 @@ int config_phy(int argc, char **argv)
         puts("Channel or TX power settings not supported");
     }
     else {
-        puts("Success!");
+        printf("Success! Channel: %d was selected\n", channel);
     }
 
     _set_trx_state(IEEE802154_TRX_STATE_RX_ON, false);
@@ -530,6 +532,21 @@ int config_phy(int argc, char **argv)
     return 0;
 }
 
+int config_phy(int argc, char **argv)
+{
+    if (argc < 3) {
+        puts("Usage: config_phy <channel> <tx_pow>");
+        return 1;
+    }
+
+    uint8_t channel = atoi(argv[1]);
+    int8_t tx_pow = atoi(argv[2]);
+
+    _config_phy(channel, tx_pow);
+
+    return 0;
+}
+
 int txmode_cmd(int argc, char **argv)
 {
     ieee802154_dev_t *dev = ieee802154_hal_test_get_dev(RADIO_DEFAULT_ID);
@@ -746,6 +763,47 @@ int txtspam(int argc, char **argv)
     return _spam(addr, res, len, num, time);
 }
 
+int test_channels(int argc, char **argv) {
+    if (argc != 3) {
+        puts("Usage: test_channels <long_addr>");
+        return 1;
+    }
+
+    uint8_t addr[IEEE802154_LONG_ADDRESS_LEN];
+    size_t res;
+    res = _parse_addr(addr, sizeof(addr), argv[1]);
+    if (res == 0) {
+        puts("Usage: test_channels <long_addr>");
+        return 1;
+    };
+
+    size_t sender = atoi(argv[2]);
+    if (sender) {
+        puts("Testing as sender");
+    } else {
+        puts("Testing as receiver");
+    }
+    for (uint8_t i = 11; i <= 26; i++) {
+        if (sender) {
+            xtimer_msleep(100);
+            _config_phy(i, 0);
+            send(addr,res, 5);
+        }
+        if (!sender) {
+            _config_phy(i, 0);
+            mutex_lock(&got_message_mutex);
+            while (!got_message) {
+                cond_wait(&got_message_cond, &got_message_mutex);
+            }
+            got_message = false;
+            mutex_unlock(&got_message_mutex);
+        }
+    }
+
+    puts("Test finished");
+    return 0;
+}
+
 int toggle_reply(int argc, char **argv) {
     (void)argv[0];
     (void)argc;
@@ -788,6 +846,7 @@ static const shell_command_t shell_commands[] = {
     { "spam", "Sends many packets to the target", txtspam },
     { "reply", "Every packet that arrives is mirrored", toggle_reply },
     { "enable_prints", "Enable printing", toggle_enable_prints },
+    { "test_channels", "It tries to transmit and receive on different channels", test_channels },
     { NULL, NULL, NULL }
 };
 
@@ -795,6 +854,8 @@ int main(void)
 {
     mutex_init(&lock);
     mutex_lock(&lock);
+    mutex_init(&got_message_mutex);
+    cond_init(&got_message_cond);
     _init();
 
     /* start the shell */
-- 
2.17.1


From dae36158019f2d02a0e49fc8d4cf8dc1648e01cf Mon Sep 17 00:00:00 2001
From: Lars <lars.kowoll@haw-hamburg.de>
Date: Tue, 22 Dec 2020 13:20:14 +0100
Subject: [PATCH 11/11] test for radio hal

---
 dist/pythonlibs/riotctrl_shell/ieee802154.py | 175 +++++++++++++++++++
 tests/ieee802154_hal/Makefile                |   3 +-
 tests/ieee802154_hal/main.c                  | 106 +++++++++--
 3 files changed, 272 insertions(+), 12 deletions(-)
 create mode 100644 dist/pythonlibs/riotctrl_shell/ieee802154.py

diff --git a/dist/pythonlibs/riotctrl_shell/ieee802154.py b/dist/pythonlibs/riotctrl_shell/ieee802154.py
new file mode 100644
index 0000000000..f625566413
--- /dev/null
+++ b/dist/pythonlibs/riotctrl_shell/ieee802154.py
@@ -0,0 +1,175 @@
+# Copyright (C) 2019-20 Freie Universität Berlin
+#
+# This file is subject to the terms and conditions of the GNU Lesser
+# General Public License v2.1. See the file LICENSE in the top level
+# directory for more details.
+
+import re
+
+from riotctrl.shell import ShellInteraction, ShellInteractionParser
+
+
+# ==== Parsers ====
+
+class ConfigPhyParser(ShellInteractionParser):
+    def __init__(self):
+        self.c_change = re.compile(r"Success! Channel: (?P<channel>\d+) was selected")
+
+    @staticmethod
+    def _add_channel(res, reply):
+        reply["channel"] = int(reply["channel"])
+        reply["ttl"] = int(reply["ttl"])
+        if reply.get("rtt") is not None:
+            reply["rtt"] = float(reply["rtt"])
+        else:
+            reply.pop("rtt", None)
+        if reply.get("dup"):
+            reply["dup"] = True
+        else:
+            reply.pop("dup", None)
+        if reply.get("rssi") is not None:
+            reply["rssi"] = int(reply["rssi"])
+        else:
+            reply.pop("rssi", None)
+        if "replies" in res:
+            res["replies"].append(reply)
+        else:
+            res["replies"] = [reply]
+
+    def parse(self, cmd_output):
+        """
+        Parses output of GNRCIPv6NIB::nib_neigh_show()
+        >>> parser = GNRCICMPv6EchoParser()
+        >>> res = parser.parse(
+        ...     "12 bytes from fe80::385d:f965:106b:1114%6: "
+        ...         "icmp_seq=0 ttl=64 rssi=-34 dBm time=8.839 ms\\n"
+        ...     "12 bytes from fe80::385d:f965:106b:1114%6: "
+        ...         "icmp_seq=1 ttl=64 rssi=-34 dBm time=6.925 ms\\n"
+        ...     "12 bytes from fe80::385d:f965:106b:1114%6: "
+        ...         "icmp_seq=2 ttl=64 rssi=-34 dBm time=7.885 ms\\n"
+        ...     "--- fe80::385d:f965:106b:1114 PING statistics ---\\n"
+        ...     "3 packets transmitted, 3 packets received, 0% packet loss\\n"
+        ...     "round-trip min/avg/max = 6.925/7.883/8.839 ms\\n")
+        >>> sorted(res)
+        ['replies', 'rtts', 'stats']
+        >>> len(res["replies"])
+        3
+        >>> sorted(res["replies"][0])
+        ['rssi', 'rtt', 'seq', 'source', 'ttl']
+        >>> res["replies"][0]["source"]
+        'fe80::385d:f965:106b:1114%6'
+        >>> res["replies"][0]["seq"]
+        0
+        >>> res["replies"][0]["ttl"]
+        64
+        >>> res["replies"][0]["rssi"]
+        -34
+        >>> res["replies"][0]["rtt"]
+        8.839
+        >>> sorted(res["stats"])
+        ['packet_loss', 'rx', 'tx']
+        >>> res["stats"]["tx"]
+        3
+        >>> res["stats"]["rx"]
+        3
+        >>> res["stats"]["packet_loss"]
+        0
+        >>> sorted(res["rtts"])
+        ['avg', 'max', 'min']
+        >>> res["rtts"]["min"]
+        6.925
+        >>> res["rtts"]["avg"]
+        7.883
+        >>> res["rtts"]["max"]
+        8.839
+        """
+        res = {}
+        for line in cmd_output.splitlines():
+            m = self.c_change.match(line)
+            if m is not None:
+                self._add_reply(res, m.groupdict())
+                continue
+            m = self.c_stats.match(line)
+            if m is not None:
+                self._set_stats(res, m.groupdict())
+                continue
+        return res
+
+# ==== ShellInteractions ====
+
+class Config_phy(ShellInteraction):
+    def config_phy(self, channel, tx_pow, timeout=None, async_=False):
+        cmd = "config_phy {channel} {tx_pow}" \
+              .format(channel=channel, tx_pow=tx_pow)
+        
+        try:
+            res = self.cmd(cmd, timeout=timeout, async_=async_)
+        except Exception as e:
+            print(str(e))
+            print("Exception")
+        
+        if "Success" not in res:
+            raise RuntimeError(res)
+
+        if str(channel) not in res:
+            raise RuntimeError(res)
+
+class Print_addr(ShellInteraction):
+    def print_addr(self, timeout=None, async_=False):
+        cmd = "print_addr" \
+              .format()
+
+        try:
+            res = self.cmd(cmd, timeout=timeout, async_=async_)
+        except Exception as e:
+            print(str(e))
+            print("Exception")
+
+        count = 0
+        for line in res.splitlines():
+            count+=1
+            if count > 2:
+                break
+            pass
+        addr = line
+        return addr
+
+class Txtsnd(ShellInteraction):
+    def txtsnd(self, long_addr, timeout=None, async_=False):
+        cmd = "txtsnd {long_addr}" \
+              .format(long_addr=long_addr)
+
+        try:
+            res = self.cmd(cmd, timeout=timeout, async_=async_)
+        except Exception as e:
+            print(str(e))
+            print("Exception")
+
+        if "succeeded" not in res and "busy" not in res:
+            raise RuntimeError(res)
+
+    def tx_mode(self, command, timeout=None, async_=False):
+        cmd = "tx_mode {command}" \
+                .format(command=command)
+
+        try:
+            res = self.cmd(cmd, timeout=timeout, async_=async_)
+        except Exception as e:
+            print(str(e))
+            print("Exception")
+
+        if "Ok" not in res:
+            raise RuntimeError(res)
+
+    def check_last_packet(self, long_addr, channel, timeout=None, async_=False):
+        cmd = "check_last_packet {long_addr} {channel}" \
+                .format(long_addr=long_addr, channel=channel)
+
+        try:
+            res = self.cmd(cmd, timeout=timeout, async_=async_)
+        except Exception as e:
+            print(str(e))
+            print("Exception")
+
+        if "Success" not in res:
+            raise RuntimeError(res)
diff --git a/tests/ieee802154_hal/Makefile b/tests/ieee802154_hal/Makefile
index a227353d67..dfff8b4c28 100644
--- a/tests/ieee802154_hal/Makefile
+++ b/tests/ieee802154_hal/Makefile
@@ -1,5 +1,6 @@
 include ../Makefile.tests_common
-
+TERMPROG := socat
+TERMFLAGS := - $(PORT),raw,echo=0,b115200
 BOARD_WHITELIST :=  \
 					adafruit-clue \
 					adafruit-itsybitsy-nrf52 \
diff --git a/tests/ieee802154_hal/main.c b/tests/ieee802154_hal/main.c
index 893ddbabeb..ffab519817 100644
--- a/tests/ieee802154_hal/main.c
+++ b/tests/ieee802154_hal/main.c
@@ -20,7 +20,7 @@
 
 #include <assert.h>
 #include <stdio.h>
-
+#include "fmt.h"
 #include "common.h"
 #include "errno.h"
 #include "event/thread.h"
@@ -54,7 +54,11 @@ static uint16_t received_acks;
 static uint16_t send_packets;
 static uint16_t received_packets;
 
+static uint8_t current_channel;
+
 static uint8_t buffer[127];
+static size_t size_last_packet;
+
 static xtimer_t timer_ack;
 static mutex_t lock;
 static mutex_t got_message_mutex;
@@ -85,6 +89,7 @@ static void _print_packet(size_t size, uint8_t lqi, int16_t rssi)
         //unlock;
         cond_signal(&got_message_cond);
         if (enable_prints) {
+            size_last_packet = size;
             puts("Packet received:");
             for (unsigned i=0;i<size;i++) {
                 printf("%02x ", buffer[i]);
@@ -330,6 +335,46 @@ static int send(uint8_t *dst, size_t dst_len,
     return 0;
 }
 
+static int send_with_channel(uint8_t *dst, size_t dst_len)
+{
+    uint8_t flags;
+    uint8_t mhr[IEEE802154_MAX_HDR_LEN];
+    int mhr_len;
+    uint8_t *channel_ptr = &current_channel;
+
+    le_uint16_t src_pan, dst_pan;
+    iolist_t iol_data = {
+        .iol_base = channel_ptr,
+        .iol_len = sizeof(*channel_ptr),
+        .iol_next = NULL,
+    };
+
+    flags = IEEE802154_FCF_TYPE_DATA ; //IEEE802154_FCF_ACK_REQ
+
+    src_pan = byteorder_btols(byteorder_htons(CONFIG_IEEE802154_DEFAULT_PANID));
+    dst_pan = byteorder_btols(byteorder_htons(CONFIG_IEEE802154_DEFAULT_PANID));
+    uint8_t src_len = IEEE802154_LONG_ADDRESS_LEN;
+    void *src = &ext_addr;
+
+    /* fill MAC header, seq should be set by device */
+    if ((mhr_len = ieee802154_set_frame_hdr(mhr, src, src_len,
+                                        dst, dst_len,
+                                        src_pan, dst_pan,
+                                        flags, seq++)) < 0) {
+        puts("txtsnd: Error preperaring frame");
+        return 1;
+    }
+
+    iolist_t iol_hdr = {
+        .iol_next = &iol_data,
+        .iol_base = mhr,
+        .iol_len = mhr_len,
+    };
+
+    _send(&iol_hdr);
+    return 0;
+}
+
 static inline int _dehex(char c, int default_)
 {
     if ('0' <= c && c <= '9') {
@@ -465,21 +510,19 @@ int _test_states(int argc, char **argv)
 int txtsnd(int argc, char **argv)
 {
     uint8_t addr[IEEE802154_LONG_ADDRESS_LEN];
-    size_t len;
     size_t res;
 
-    if (argc != 3) {
-        puts("Usage: txtsnd <long_addr> <len>");
+    if (argc != 2) {
+        puts("Usage: txtsnd <long_addr>");
         return 1;
     }
 
     res = _parse_addr(addr, sizeof(addr), argv[1]);
     if (res == 0) {
-        puts("Usage: txtsnd <long_addr> <len>");
+        puts("Usage: txtsnd <long_addr>");
         return 1;
     }
-    len = atoi(argv[2]);
-    return send(addr, res, len);
+    return send_with_channel(addr, res);
 }
 
 static int rx_mode_cmd(int argc, char **argv)
@@ -519,12 +562,14 @@ int _config_phy(uint8_t channel, int8_t tx_pow) {
     }
     _set_trx_state(IEEE802154_TRX_STATE_TRX_OFF, false);
     ieee802154_dev_t *dev = ieee802154_hal_test_get_dev(RADIO_DEFAULT_ID);
+    puts("");
     ieee802154_phy_conf_t conf = {.channel=channel, .page=0, .pow=tx_pow};
     if (ieee802154_radio_config_phy(dev, &conf) < 0) {
         puts("Channel or TX power settings not supported");
     }
     else {
         printf("Success! Channel: %d was selected\n", channel);
+        current_channel = channel;
     }
 
     _set_trx_state(IEEE802154_TRX_STATE_RX_ON, false);
@@ -765,7 +810,7 @@ int txtspam(int argc, char **argv)
 
 int test_channels(int argc, char **argv) {
     if (argc != 3) {
-        puts("Usage: test_channels <long_addr>");
+        puts("Usage: test_channels <long_addr> <1 for Sender, 1 for Receiver>");
         return 1;
     }
 
@@ -773,7 +818,7 @@ int test_channels(int argc, char **argv) {
     size_t res;
     res = _parse_addr(addr, sizeof(addr), argv[1]);
     if (res == 0) {
-        puts("Usage: test_channels <long_addr>");
+        puts("Usage: test_channels <long_addr> <1 for Sender, 1 for Receiver>");
         return 1;
     };
 
@@ -832,6 +877,42 @@ int toggle_enable_prints(int argc, char **argv) {
     return 0;
 }
 
+int check_last_packet(int argc, char **argv) {
+    if (argc != 3) {
+        puts("Usage: check_last_packet <long_addr> <channel>");
+        return 1;
+    }
+    
+    uint8_t channel = atoi(argv[2]);
+    uint8_t addr[IEEE802154_LONG_ADDRESS_LEN];
+    uint8_t receive_addr[IEEE802154_LONG_ADDRESS_LEN];
+    _parse_addr(addr, sizeof(addr), argv[1]);
+    bool result =  true;
+    le_uint16_t src_pan;
+    ieee802154_get_src(buffer, receive_addr, &src_pan);
+    if (memcmp(addr, receive_addr, IEEE802154_LONG_ADDRESS_LEN) != 0) {
+        result = false;
+    }
+  /*  char string[IEEE802154_LONG_ADDRESS_LEN * 2 + 1];
+    memset(string, 0, sizeof(string));
+    fmt_bytes_hex (string, addr, 8);
+    printf("%s", string);
+    fmt_bytes_hex (string, receive_addr, 8);
+    printf("%s", string); */
+    if (channel != buffer[21]) {
+        puts("Fail channel match");
+        result = false;
+    }
+
+    if (result) {
+        puts("Success");
+    } else {
+        puts("No match");
+    }
+    puts("\n");
+    return 0;
+}
+
 
 static const shell_command_t shell_commands[] = {
     { "config_phy", "Set channel and TX power", config_phy},
@@ -847,6 +928,7 @@ static const shell_command_t shell_commands[] = {
     { "reply", "Every packet that arrives is mirrored", toggle_reply },
     { "enable_prints", "Enable printing", toggle_enable_prints },
     { "test_channels", "It tries to transmit and receive on different channels", test_channels },
+    { "check_last_packet", "Print last packet", check_last_packet },
     { NULL, NULL, NULL }
 };
 
@@ -857,10 +939,12 @@ int main(void)
     mutex_init(&got_message_mutex);
     cond_init(&got_message_cond);
     _init();
-
+    enable_prints = true;
+    current_channel = 26;
     /* start the shell */
     puts("Initialization successful - starting the shell now");
-
+    //xtimer_msleep(2000);
+    //puts(">");
     char line_buf[SHELL_DEFAULT_BUFSIZE];
     shell_run(shell_commands, line_buf, SHELL_DEFAULT_BUFSIZE);
 
-- 
2.17.1

